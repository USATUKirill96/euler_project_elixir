defmodule Problem2 do
  @moduledoc """
  Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
  By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

  ## Examples

      iex> Problem2.execute(4000000)
      4613732
  """
  require Integer

  @spec execute(integer) :: integer
  def execute(max_number) when max_number >= 0, do: execute(0, max_number, [1, 1])


  @spec execute(integer, integer, list :: [integer]) :: integer
  defp execute(summ, max_number, [first, second]) do
    current = first + second  # calculate current Fibonacci number as the sum of two previous

    if current <= max_number do
      get_new_summ(summ, current) # calculate the new summ of numbers. The value increases if the current number is even
      |> execute(max_number, [second, current]) # replace the first number value with the second one and the second - with the new one

    else
      # edge case, return the collected summ
      summ

    end

  end

  @spec get_new_summ(integer, integer) :: integer
  defp get_new_summ(summ, number)do
    # Takes a pair of integers. Returns its summ if the second is even, else returns the first one
    if Integer.is_even(number) do summ + number else summ end
  end

end
